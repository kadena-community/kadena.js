version: '3'
services:
  # Bootstrap Node
  chainweb-node:
    extends:
      file: node.yaml
      service: node
    platform: linux/amd64
    hostname: bootstrap-node
    labels:
      com.chainweb.devnet.description: "Devnet Bootstrap Node"
      com.chainweb.devnet.bootstrap-node: ""
    volumes:
      - ${PWD}/devnet-bootstrap-node.cert.pem:/chainweb/devnet-bootstrap-node.cert.pem:ro
      - ${PWD}/devnet-bootstrap-node.key.pem:/chainweb/devnet-bootstrap-node.key.pem:ro
      - sandbox:/chainweb/db
    command:
      - --p2p-certificate-chain-file=/chainweb/devnet-bootstrap-node.cert.pem
      - --p2p-certificate-key-file=/chainweb/devnet-bootstrap-node.key.pem
      - --p2p-hostname=bootstrap-node
      - --bootstrap-reachability=1
      - --cluster-id=devnet-indexer
      - --p2p-max-session-count=2
      - --mempool-p2p-max-session-count=2
      - --known-peer-info=YNo7pXthYQ9RQKv1bbpQf2R5LcLYA3ppx2BL2Hf8fIM@bootstrap-node:1789
      - --log-level=info
      - --enable-mining-coordination
      - --mining-public-key=${MINER_PUBLIC_KEY}
      - --header-stream
      - --allowReadsInLocal
      - --database-directory=/chainweb/db
      - --disable-pow
    ports:
      - "1848:1848" # Node Service Port
      - "1789:1789" # Chainweb node's p2p API port
    environment:
      - DISABLE_POW_VALIDATION=1
  
  # Simulation Miner
  simulation-miner:
    image: "${MINING_CLIENT_IMAGE:-ghcr.io/kadena-io/chainweb-mining-client:latest}"
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      chainweb-node:
        condition: service_healthy
    entrypoint: "/chainweb-mining-client/chainweb-mining-client"
    command:
      - --public-key=${MINER_PUBLIC_KEY:-f89ef46927f506c70b6a58fd322450a936311dc6ac91f4ec3d8ef949608dbf1f}
      - --node=bootstrap-node:1848
      - --worker=constant-delay
      - --thread-count=1
      - --log-level=info
      - --no-tls
      - --constant-delay-block-time=10
    ports:
      - "1917:1917" # Stratum mining protocol
  
  # SSL Certificates for Postgres
  certs:
    image: alpine
    volumes:
      - certs-volume:/certs
    entrypoint: |
      /bin/sh -c '
      apk add --no-cache openssl &&
      mkdir -p /certs &&
      openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
        -keyout /certs/server.key \
        -out /certs/server.crt \
        -subj "/C=US/ST=Blockchain/L=Kadena/O=Hackachain/OU=Indexer/CN=localhost" &&
      chown -R 999:999 /certs &&
      chmod 600 /certs/server.key
      '
  
  # Postgres Database
  postgres:
    hostname: indexer-postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dofnRBhfPFFd7qX8XM8QLLt0}
      POSTGRES_DB: ${DB_NAME:-indexer-pgdb}
    command: [
      "postgres",
      "-c", "ssl=on",
      "-c", "ssl_cert_file=/var/lib/postgresql/certs/server.crt",
      "-c", "ssl_key_file=/var/lib/postgresql/certs/server.key"
    ]
    ports:
      - "5432:5432" # PostgreSQL
    volumes:
      - postgres-volume:/var/lib/postgresql/data
      - certs-volume:/var/lib/postgresql/certs:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-indexer-pgdb}"]
      interval: 1s
      timeout: 5s
      retries: 10
    depends_on:
      certs:
        condition: service_completed_successfully
  
  # Run migrations when databases are up
  indexer-migrations:
    build:
      context: ${INDEXER_REPO:-https://github.com/hack-a-chain-software/indexer-kadena.git#main}
      dockerfile: Dockerfile.development
    command: ["yarn", "create:database"]
    environment:
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-dofnRBhfPFFd7qX8XM8QLLt0}
      DB_NAME: ${DB_NAME:-indexer-pgdb}
      DB_HOST: indexer-postgres
      NODE_API_URL: http://bootstrap-node:1848
      SYNC_BASE_URL: "http://bootstrap-node:1848/chainweb/0.0"
      SYNC_MIN_HEIGHT: 0
      SYNC_FETCH_INTERVAL_IN_BLOCKS: 50
      SYNC_NETWORK: "development"
      API_GATEWAY_URL: http://indexer-kadenagraphql:3000
      DB_SSL_ENABLED: "false"
    depends_on:
      postgres:
        condition: service_healthy
      chainweb-node:
        condition: service_healthy
  
  # GraphQL API
  indexer-kadenagraphql:
    hostname: indexer-kadenagraphql
    build:
      context: ${INDEXER_REPO:-https://github.com/hack-a-chain-software/indexer-kadena.git#main}
      dockerfile: Dockerfile.development
    command: ["yarn", "dev:graphql"]
    environment:
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-dofnRBhfPFFd7qX8XM8QLLt0}
      DB_NAME: ${DB_NAME:-indexer-pgdb}
      DB_HOST: indexer-postgres
      NODE_API_URL: http://bootstrap-node:1848
      SYNC_BASE_URL: "http://bootstrap-node:1848/chainweb/0.0"
      SYNC_MIN_HEIGHT: 0
      SYNC_FETCH_INTERVAL_IN_BLOCKS: 50
      SYNC_NETWORK: "development"
      API_GATEWAY_URL: http://indexer-kadenagraphql:3000
      DB_SSL_ENABLED: "false"
      KADENA_GRAPHQL_API_URL: http://indexer-kadenagraphql
      KADENA_GRAPHQL_API_PORT: 3000
    ports:
      - "3000:3000" # GraphQL API
    depends_on:
      postgres:
        condition: service_healthy
      chainweb-node:
        condition: service_healthy
      indexer-migrations:
        condition: service_completed_successfully
  
  # Main indexer service
  indexer:
    build:
      context: ${INDEXER_REPO:-https://github.com/hack-a-chain-software/indexer-kadena.git#main}
      dockerfile: Dockerfile.development
    command: ["yarn", "dev:streaming"]
    environment:
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-dofnRBhfPFFd7qX8XM8QLLt0}
      DB_NAME: ${DB_NAME:-indexer-pgdb}
      DB_HOST: indexer-postgres
      NODE_API_URL: http://bootstrap-node:1848
      SYNC_BASE_URL: "http://bootstrap-node:1848/chainweb/0.0"
      SYNC_MIN_HEIGHT: 0
      SYNC_FETCH_INTERVAL_IN_BLOCKS: 50
      SYNC_NETWORK: "development"
      API_GATEWAY_URL: http://indexer-kadenagraphql:3000
      DB_SSL_ENABLED: "false"
    ports:
      - "3001:3001" # Indexer service
    depends_on:
      postgres:
        condition: service_healthy
      chainweb-node:
        condition: service_healthy
      indexer-kadenagraphql:
        condition: service_started

  # Nginx API Proxy (optional, commented out)
  # api-proxy:
  #   labels:
  #     com.chainweb.devnet.description: "Devnet API Proxy"
  #     com.chainweb.devnet.api-proxy: ""
  #   depends_on:
  #     chainweb-node:
  #       condition: service_healthy
  #   image: nginx:latest
  #   platform: linux/amd64
  #   volumes:
  #   - ${PWD}/config/nginx.api.minimal.conf:/etc/nginx/conf.d/default.conf
  #   ports:
  #   - "8080:80" # HTTP API

volumes:
  sandbox:
  postgres-volume:
  certs-volume:
  proxy-data:

networks:
  default:
    name: chainweb-devnet-sandbox