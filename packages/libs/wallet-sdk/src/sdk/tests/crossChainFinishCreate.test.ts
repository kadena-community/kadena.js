import type { ChainId } from '@kadena/types';
import { http, HttpResponse } from 'msw';
import { setupServer } from 'msw/node';
import { afterAll, afterEach, beforeAll, describe, expect, it } from 'vitest';
import { crossChainFinishCreateCommand } from '../crossChainFinishCreate.js';

const server = setupServer();

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

server.use(
  http.post(
    'https://api.testnet.chainweb.com/chainweb/0.0/testnet04/chain/0/pact/spv',
    async () => {
      return HttpResponse.text(
        'eyJjaGFpbiI6MSwib2JqZWN0IjoiQUFBQUVBQUFBQUFBQUFBQkFEYy1ZMEwzdldwMXRMU0ZPWTQ4emtnUGlKd3NWZU41M0wtaURFamV5NTJ1QUgzdExDR0NVbFEwcjUwZll0eVl6X3NCeThmV3lydTVmUGNaT3AxYWRhT01BZWhPUk94V0FyQmJ1emV2dktNR1BlMHVGVV9QTzJ6MzdULS1jS2F0NnV3ekFYeTdDVGV0Zl9tWWc5LXpJb2x6ZXhWNENWeXpMamRzWnpsVXlpUDhMLXh2QU9DM2ZzUE9SU3VsenJsSkpfc2pLdVJ3ZVhISnNhUUI2OEtCWW1kSmd1bmVBU21ER0hkWUd2ZzZvMXNwaXR2NldORjkxMm9GYmFqQWZ4dVMtY3pPbnJVU0FMM1R4Rm40UWZ1ZFI3T2w5NkxiQVV1Nmxsektua1RLbVBSNEVkNTdkay1PQU5DcFM1NllTRzgySkhqSVcwci04N1NxckdzeWNQSmx2VVk3VkgtaG1lbXVBZFlZenNERjhhS05RRWlPcDJidU1UOTFuSWFEM3dpaF9wVURfem9JVWxEVEFEUGJfTTVNdkxFWTh3Z2V0OWYzbWVvWXBZemdLOGI3NXFCZXVKTGd6TDlHQWJhYWdkWkJFdEVlQjlsOUt6TzUycUstMkQ2XzdOdkRnZHAtU255OFBkVmpBTU0tRGYzNGdkN1hDZmsycXNsU2lvWm00UWhRTUdLMUw3UzU4eGpmUkpBbEFCaXVwZENaeEJhcEVjZUV4UXVDZXp3ODFySXJDa2gyTnRrY2V4N1F5TTFnQVNIT2w0NllldGFEWU1pMDlGS0pOYUNDMUthV2paMVlfVnFsamhRZXNINzBBRS14YXh3a3RfZmVRdnBibkZkR0EwVWVuVTlSb1FpdkxwcDBhZklvZzdfVEFDdTZ0dFU0OXRpcW11R0hraDhVTF80Sm9OUVBvRmdWZlBWVktCbzJ5RU1aIiwic3ViamVjdCI6eyJpbnB1dCI6IkFCUjdJbWRoY3lJNk5qRTVMQ0p5WlhOMWJIUWlPbnNpYzNSaGRIVnpJam9pYzNWalkyVnpjeUlzSW1SaGRHRWlPbnNpWVcxdmRXNTBJam93TGpFc0luSmxZMlZwZG1WeUlqb2lhem95TURFM1ptVmxNMlppTVRWalptVTROREJsTldWa016UmlaakV3TVdOak4yUTFOVGM1Wm1aa1pESXdaR1ZoTURsbE16Sm1aRGMzWXpFM05UZG1PVFEySWl3aWMyOTFjbU5sTFdOb1lXbHVJam9pTUNJc0luSmxZMlZwZG1WeUxXZDFZWEprSWpwN0luQnlaV1FpT2lKclpYbHpMV0ZzYkNJc0ltdGxlWE1pT2xzaU1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSmRmWDE5TENKeVpYRkxaWGtpT2lKR1ZuYzVNMmRJWWtGVlVsUlVTVGMwTFdkaWQzWlVXVGhCVVVaQk4zQmtPVzFtY2padllrSTRVMDFaSWl3aWJHOW5jeUk2SWxwWlNVOUhNbFJUYjFwVmMweEVRbGREV0ZoRlgxVjZla1ZhY1hJM2RYZG9SeTFCVDNCcFJVcDZSbWNpTENKbGRtVnVkSE1pT2x0N0luQmhjbUZ0Y3lJNld5SnJPakl3TVRkbVpXVXpabUl4TldObVpUZzBNR1UxWldRek5HSm1NVEF4WTJNM1pEVTFOemxtWm1Sa01qQmtaV0V3T1dVek1tWmtOemRqTVRjMU4yWTVORFlpTENKck9tUmlOemMyTnprelltVXdabU5tT0dVM05tTTNOV0prWWpNMVlUTTJaVFkzWmpJNU9ERXhNV1JqTmpFME5XTTJOalk1TTJJd01UTXpNVGt5WlRJMk1UWWlMRFl1TVRsbExUWmRMQ0p1WVcxbElqb2lWRkpCVGxOR1JWSWlMQ0p0YjJSMWJHVWlPbnNpYm1GdFpYTndZV05sSWpwdWRXeHNMQ0p1WVcxbElqb2lZMjlwYmlKOUxDSnRiMlIxYkdWSVlYTm9Jam9pYTJ4R2EzSk1abkI1VEZjdFRUTjRhbFpRVTJSeFdFVk5aM2hRVUVwcFlsSjBYMFEyY1dsQ2QzTTJjeUo5TEhzaWNHRnlZVzF6SWpwYkltczZNakF4TjJabFpUTm1ZakUxWTJabE9EUXdaVFZsWkRNMFltWXhNREZqWXpka05UVTNPV1ptWkdReU1HUmxZVEE1WlRNeVptUTNOMk14TnpVM1pqazBOaUlzSW1zNk1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSXNNQzR4TENJeElsMHNJbTVoYldVaU9pSlVVa0ZPVTBaRlVsOVlRMGhCU1U0aUxDSnRiMlIxYkdVaU9uc2libUZ0WlhOd1lXTmxJanB1ZFd4c0xDSnVZVzFsSWpvaVkyOXBiaUo5TENKdGIyUjFiR1ZJWVhOb0lqb2lhMnhHYTNKTVpuQjVURmN0VFRONGFsWlFVMlJ4V0VWTlozaFFVRXBwWWxKMFgwUTJjV2xDZDNNMmN5SjlMSHNpY0dGeVlXMXpJanBiSW1zNk1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSXNJaUlzTUM0eFhTd2libUZ0WlNJNklsUlNRVTVUUmtWU0lpd2liVzlrZFd4bElqcDdJbTVoYldWemNHRmpaU0k2Ym5Wc2JDd2libUZ0WlNJNkltTnZhVzRpZlN3aWJXOWtkV3hsU0dGemFDSTZJbXRzUm10eVRHWndlVXhYTFUwemVHcFdVRk5rY1ZoRlRXZDRVRkJLYVdKU2RGOUVObkZwUW5kek5uTWlmU3g3SW5CaGNtRnRjeUk2V3lJeElpd2lZMjlwYmk1MGNtRnVjMlpsY2kxamNtOXpjMk5vWVdsdUlpeGJJbXM2TWpBeE4yWmxaVE5tWWpFMVkyWmxPRFF3WlRWbFpETTBZbVl4TURGall6ZGtOVFUzT1dabVpHUXlNR1JsWVRBNVpUTXlabVEzTjJNeE56VTNaamswTmlJc0ltczZNakF4TjJabFpUTm1ZakUxWTJabE9EUXdaVFZsWkRNMFltWXhNREZqWXpka05UVTNPV1ptWkdReU1HUmxZVEE1WlRNeVptUTNOMk14TnpVM1pqazBOaUlzZXlKd2NtVmtJam9pYTJWNWN5MWhiR3dpTENKclpYbHpJanBiSWpJd01UZG1aV1V6Wm1JeE5XTm1aVGcwTUdVMVpXUXpOR0ptTVRBeFkyTTNaRFUxTnpsbVptUmtNakJrWldFd09XVXpNbVprTnpkak1UYzFOMlk1TkRZaVhYMHNJakVpTERBdU1WMWRMQ0p1WVcxbElqb2lXRjlaU1VWTVJDSXNJbTF2WkhWc1pTSTZleUp1WVcxbGMzQmhZMlVpT201MWJHd3NJbTVoYldVaU9pSndZV04wSW4wc0ltMXZaSFZzWlVoaGMyZ2lPaUpyYkVacmNreG1jSGxNVnkxTk0zaHFWbEJUWkhGWVJVMW5lRkJRU21saVVuUmZSRFp4YVVKM2N6WnpJbjFkTENKdFpYUmhSR0YwWVNJNmJuVnNiQ3dpWTI5dWRHbHVkV0YwYVc5dUlqcDdJbVY0WldOMWRHVmtJanB1ZFd4c0xDSndZV04wU1dRaU9pSkdWbmM1TTJkSVlrRlZVbFJVU1RjMExXZGlkM1pVV1RoQlVVWkJOM0JrT1cxbWNqWnZZa0k0VTAxWklpd2ljM1JsY0VoaGMxSnZiR3hpWVdOcklqcG1ZV3h6WlN3aWMzUmxjQ0k2TUN3aWVXbGxiR1FpT25zaVpHRjBZU0k2ZXlKaGJXOTFiblFpT2pBdU1Td2ljbVZqWldsMlpYSWlPaUpyT2pJd01UZG1aV1V6Wm1JeE5XTm1aVGcwTUdVMVpXUXpOR0ptTVRBeFkyTTNaRFUxTnpsbVptUmtNakJrWldFd09XVXpNbVprTnpkak1UYzFOMlk1TkRZaUxDSnpiM1Z5WTJVdFkyaGhhVzRpT2lJd0lpd2ljbVZqWldsMlpYSXRaM1ZoY21RaU9uc2ljSEpsWkNJNkltdGxlWE10WVd4c0lpd2lhMlY1Y3lJNld5SXlNREUzWm1WbE0yWmlNVFZqWm1VNE5EQmxOV1ZrTXpSaVpqRXdNV05qTjJRMU5UYzVabVprWkRJd1pHVmhNRGxsTXpKbVpEYzNZekUzTlRkbU9UUTJJbDE5ZlN3aWMyOTFjbU5sSWpvaU1DSXNJbkJ5YjNabGJtRnVZMlVpT25zaWRHRnlaMlYwUTJoaGFXNUpaQ0k2SWpFaUxDSnRiMlIxYkdWSVlYTm9Jam9pYTJ4R2EzSk1abkI1VEZjdFRUTjRhbFpRVTJSeFdFVk5aM2hRVUVwcFlsSjBYMFEyY1dsQ2QzTTJjeUo5ZlN3aVkyOXVkR2x1ZFdGMGFXOXVJanA3SW1GeVozTWlPbHNpYXpveU1ERTNabVZsTTJaaU1UVmpabVU0TkRCbE5XVmtNelJpWmpFd01XTmpOMlExTlRjNVptWmtaREl3WkdWaE1EbGxNekptWkRjM1l6RTNOVGRtT1RRMklpd2lhem95TURFM1ptVmxNMlppTVRWalptVTROREJsTldWa016UmlaakV3TVdOak4yUTFOVGM1Wm1aa1pESXdaR1ZoTURsbE16Sm1aRGMzWXpFM05UZG1PVFEySWl4N0luQnlaV1FpT2lKclpYbHpMV0ZzYkNJc0ltdGxlWE1pT2xzaU1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSmRmU3dpTVNJc01DNHhYU3dpWkdWbUlqb2lZMjlwYmk1MGNtRnVjMlpsY2kxamNtOXpjMk5vWVdsdUluMHNJbk4wWlhCRGIzVnVkQ0k2TW4wc0luUjRTV1FpT2pRNE9ETTNPVEY5In0sImFsZ29yaXRobSI6IlNIQTUxMnRfMjU2In0',
      );
    },
  ),
);

describe('simpleTransferCreateCommand', () => {
  it('should create a transfer command', async () => {
    const output = await crossChainFinishCreateCommand(
      {
        amount: 100,
        chainId: '0' as ChainId,
        receiverAccount: 'k:receiverKey',
        senderAccount: 'k:senderKey',
        targetChainId: '1' as ChainId,
        host: 'https://api.testnet.chainweb.com/chainweb/0.0/testnet04/chain/0/pact',
        networkId: 'testnet04',
        requestKey: 'FVw93gHbAURTTI74-gbwvTY8AQFA7pd9mfr6obB8SMY',
      },
      {
        account: 'k:gasPayerKey',
        publicKeys: ['gasPayerKey'],
      },
    );

    expect(JSON.parse(output.cmd)).toEqual({
      payload: {
        cont: {
          data: {
            from: 'k:senderKey',
            to: 'k:receiverKey',
            amount: 100,
            fromChain: '0',
            toChain: '1',
          },
          proof:
            'eyJjaGFpbiI6MSwib2JqZWN0IjoiQUFBQUVBQUFBQUFBQUFBQkFEYy1ZMEwzdldwMXRMU0ZPWTQ4emtnUGlKd3NWZU41M0wtaURFamV5NTJ1QUgzdExDR0NVbFEwcjUwZll0eVl6X3NCeThmV3lydTVmUGNaT3AxYWRhT01BZWhPUk94V0FyQmJ1emV2dktNR1BlMHVGVV9QTzJ6MzdULS1jS2F0NnV3ekFYeTdDVGV0Zl9tWWc5LXpJb2x6ZXhWNENWeXpMamRzWnpsVXlpUDhMLXh2QU9DM2ZzUE9SU3VsenJsSkpfc2pLdVJ3ZVhISnNhUUI2OEtCWW1kSmd1bmVBU21ER0hkWUd2ZzZvMXNwaXR2NldORjkxMm9GYmFqQWZ4dVMtY3pPbnJVU0FMM1R4Rm40UWZ1ZFI3T2w5NkxiQVV1Nmxsektua1RLbVBSNEVkNTdkay1PQU5DcFM1NllTRzgySkhqSVcwci04N1NxckdzeWNQSmx2VVk3VkgtaG1lbXVBZFlZenNERjhhS05RRWlPcDJidU1UOTFuSWFEM3dpaF9wVURfem9JVWxEVEFEUGJfTTVNdkxFWTh3Z2V0OWYzbWVvWXBZemdLOGI3NXFCZXVKTGd6TDlHQWJhYWdkWkJFdEVlQjlsOUt6TzUycUstMkQ2XzdOdkRnZHAtU255OFBkVmpBTU0tRGYzNGdkN1hDZmsycXNsU2lvWm00UWhRTUdLMUw3UzU4eGpmUkpBbEFCaXVwZENaeEJhcEVjZUV4UXVDZXp3ODFySXJDa2gyTnRrY2V4N1F5TTFnQVNIT2w0NllldGFEWU1pMDlGS0pOYUNDMUthV2paMVlfVnFsamhRZXNINzBBRS14YXh3a3RfZmVRdnBibkZkR0EwVWVuVTlSb1FpdkxwcDBhZklvZzdfVEFDdTZ0dFU0OXRpcW11R0hraDhVTF80Sm9OUVBvRmdWZlBWVktCbzJ5RU1aIiwic3ViamVjdCI6eyJpbnB1dCI6IkFCUjdJbWRoY3lJNk5qRTVMQ0p5WlhOMWJIUWlPbnNpYzNSaGRIVnpJam9pYzNWalkyVnpjeUlzSW1SaGRHRWlPbnNpWVcxdmRXNTBJam93TGpFc0luSmxZMlZwZG1WeUlqb2lhem95TURFM1ptVmxNMlppTVRWalptVTROREJsTldWa016UmlaakV3TVdOak4yUTFOVGM1Wm1aa1pESXdaR1ZoTURsbE16Sm1aRGMzWXpFM05UZG1PVFEySWl3aWMyOTFjbU5sTFdOb1lXbHVJam9pTUNJc0luSmxZMlZwZG1WeUxXZDFZWEprSWpwN0luQnlaV1FpT2lKclpYbHpMV0ZzYkNJc0ltdGxlWE1pT2xzaU1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSmRmWDE5TENKeVpYRkxaWGtpT2lKR1ZuYzVNMmRJWWtGVlVsUlVTVGMwTFdkaWQzWlVXVGhCVVVaQk4zQmtPVzFtY2padllrSTRVMDFaSWl3aWJHOW5jeUk2SWxwWlNVOUhNbFJUYjFwVmMweEVRbGREV0ZoRlgxVjZla1ZhY1hJM2RYZG9SeTFCVDNCcFJVcDZSbWNpTENKbGRtVnVkSE1pT2x0N0luQmhjbUZ0Y3lJNld5SnJPakl3TVRkbVpXVXpabUl4TldObVpUZzBNR1UxWldRek5HSm1NVEF4WTJNM1pEVTFOemxtWm1Sa01qQmtaV0V3T1dVek1tWmtOemRqTVRjMU4yWTVORFlpTENKck9tUmlOemMyTnprelltVXdabU5tT0dVM05tTTNOV0prWWpNMVlUTTJaVFkzWmpJNU9ERXhNV1JqTmpFME5XTTJOalk1TTJJd01UTXpNVGt5WlRJMk1UWWlMRFl1TVRsbExUWmRMQ0p1WVcxbElqb2lWRkpCVGxOR1JWSWlMQ0p0YjJSMWJHVWlPbnNpYm1GdFpYTndZV05sSWpwdWRXeHNMQ0p1WVcxbElqb2lZMjlwYmlKOUxDSnRiMlIxYkdWSVlYTm9Jam9pYTJ4R2EzSk1abkI1VEZjdFRUTjRhbFpRVTJSeFdFVk5aM2hRVUVwcFlsSjBYMFEyY1dsQ2QzTTJjeUo5TEhzaWNHRnlZVzF6SWpwYkltczZNakF4TjJabFpUTm1ZakUxWTJabE9EUXdaVFZsWkRNMFltWXhNREZqWXpka05UVTNPV1ptWkdReU1HUmxZVEE1WlRNeVptUTNOMk14TnpVM1pqazBOaUlzSW1zNk1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSXNNQzR4TENJeElsMHNJbTVoYldVaU9pSlVVa0ZPVTBaRlVsOVlRMGhCU1U0aUxDSnRiMlIxYkdVaU9uc2libUZ0WlhOd1lXTmxJanB1ZFd4c0xDSnVZVzFsSWpvaVkyOXBiaUo5TENKdGIyUjFiR1ZJWVhOb0lqb2lhMnhHYTNKTVpuQjVURmN0VFRONGFsWlFVMlJ4V0VWTlozaFFVRXBwWWxKMFgwUTJjV2xDZDNNMmN5SjlMSHNpY0dGeVlXMXpJanBiSW1zNk1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSXNJaUlzTUM0eFhTd2libUZ0WlNJNklsUlNRVTVUUmtWU0lpd2liVzlrZFd4bElqcDdJbTVoYldWemNHRmpaU0k2Ym5Wc2JDd2libUZ0WlNJNkltTnZhVzRpZlN3aWJXOWtkV3hsU0dGemFDSTZJbXRzUm10eVRHWndlVXhYTFUwemVHcFdVRk5rY1ZoRlRXZDRVRkJLYVdKU2RGOUVObkZwUW5kek5uTWlmU3g3SW5CaGNtRnRjeUk2V3lJeElpd2lZMjlwYmk1MGNtRnVjMlpsY2kxamNtOXpjMk5vWVdsdUlpeGJJbXM2TWpBeE4yWmxaVE5tWWpFMVkyWmxPRFF3WlRWbFpETTBZbVl4TURGall6ZGtOVFUzT1dabVpHUXlNR1JsWVRBNVpUTXlabVEzTjJNeE56VTNaamswTmlJc0ltczZNakF4TjJabFpUTm1ZakUxWTJabE9EUXdaVFZsWkRNMFltWXhNREZqWXpka05UVTNPV1ptWkdReU1HUmxZVEE1WlRNeVptUTNOMk14TnpVM1pqazBOaUlzZXlKd2NtVmtJam9pYTJWNWN5MWhiR3dpTENKclpYbHpJanBiSWpJd01UZG1aV1V6Wm1JeE5XTm1aVGcwTUdVMVpXUXpOR0ptTVRBeFkyTTNaRFUxTnpsbVptUmtNakJrWldFd09XVXpNbVprTnpkak1UYzFOMlk1TkRZaVhYMHNJakVpTERBdU1WMWRMQ0p1WVcxbElqb2lXRjlaU1VWTVJDSXNJbTF2WkhWc1pTSTZleUp1WVcxbGMzQmhZMlVpT201MWJHd3NJbTVoYldVaU9pSndZV04wSW4wc0ltMXZaSFZzWlVoaGMyZ2lPaUpyYkVacmNreG1jSGxNVnkxTk0zaHFWbEJUWkhGWVJVMW5lRkJRU21saVVuUmZSRFp4YVVKM2N6WnpJbjFkTENKdFpYUmhSR0YwWVNJNmJuVnNiQ3dpWTI5dWRHbHVkV0YwYVc5dUlqcDdJbVY0WldOMWRHVmtJanB1ZFd4c0xDSndZV04wU1dRaU9pSkdWbmM1TTJkSVlrRlZVbFJVU1RjMExXZGlkM1pVV1RoQlVVWkJOM0JrT1cxbWNqWnZZa0k0VTAxWklpd2ljM1JsY0VoaGMxSnZiR3hpWVdOcklqcG1ZV3h6WlN3aWMzUmxjQ0k2TUN3aWVXbGxiR1FpT25zaVpHRjBZU0k2ZXlKaGJXOTFiblFpT2pBdU1Td2ljbVZqWldsMlpYSWlPaUpyT2pJd01UZG1aV1V6Wm1JeE5XTm1aVGcwTUdVMVpXUXpOR0ptTVRBeFkyTTNaRFUxTnpsbVptUmtNakJrWldFd09XVXpNbVprTnpkak1UYzFOMlk1TkRZaUxDSnpiM1Z5WTJVdFkyaGhhVzRpT2lJd0lpd2ljbVZqWldsMlpYSXRaM1ZoY21RaU9uc2ljSEpsWkNJNkltdGxlWE10WVd4c0lpd2lhMlY1Y3lJNld5SXlNREUzWm1WbE0yWmlNVFZqWm1VNE5EQmxOV1ZrTXpSaVpqRXdNV05qTjJRMU5UYzVabVprWkRJd1pHVmhNRGxsTXpKbVpEYzNZekUzTlRkbU9UUTJJbDE5ZlN3aWMyOTFjbU5sSWpvaU1DSXNJbkJ5YjNabGJtRnVZMlVpT25zaWRHRnlaMlYwUTJoaGFXNUpaQ0k2SWpFaUxDSnRiMlIxYkdWSVlYTm9Jam9pYTJ4R2EzSk1abkI1VEZjdFRUTjRhbFpRVTJSeFdFVk5aM2hRVUVwcFlsSjBYMFEyY1dsQ2QzTTJjeUo5ZlN3aVkyOXVkR2x1ZFdGMGFXOXVJanA3SW1GeVozTWlPbHNpYXpveU1ERTNabVZsTTJaaU1UVmpabVU0TkRCbE5XVmtNelJpWmpFd01XTmpOMlExTlRjNVptWmtaREl3WkdWaE1EbGxNekptWkRjM1l6RTNOVGRtT1RRMklpd2lhem95TURFM1ptVmxNMlppTVRWalptVTROREJsTldWa016UmlaakV3TVdOak4yUTFOVGM1Wm1aa1pESXdaR1ZoTURsbE16Sm1aRGMzWXpFM05UZG1PVFEySWl4N0luQnlaV1FpT2lKclpYbHpMV0ZzYkNJc0ltdGxlWE1pT2xzaU1qQXhOMlpsWlRObVlqRTFZMlpsT0RRd1pUVmxaRE0wWW1ZeE1ERmpZemRrTlRVM09XWm1aR1F5TUdSbFlUQTVaVE15Wm1RM04yTXhOelUzWmprME5pSmRmU3dpTVNJc01DNHhYU3dpWkdWbUlqb2lZMjlwYmk1MGNtRnVjMlpsY2kxamNtOXpjMk5vWVdsdUluMHNJbk4wWlhCRGIzVnVkQ0k2TW4wc0luUjRTV1FpT2pRNE9ETTNPVEY5In0sImFsZ29yaXRobSI6IlNIQTUxMnRfMjU2In0',
          pactId: 'FVw93gHbAURTTI74-gbwvTY8AQFA7pd9mfr6obB8SMY',
          rollback: false,
          step: 1,
        },
      },
      nonce: expect.any(String),
      signers: [
        {
          pubKey: 'gasPayerKey',
          scheme: 'ED25519',
          clist: [{ name: 'coin.GAS', args: [] }],
        },
      ],
      meta: {
        gasLimit: 850,
        gasPrice: 1e-8,
        sender: 'k:gasPayerKey',
        ttl: 28800,
        creationTime: expect.any(Number),
        chainId: '0',
      },
      networkId: 'testnet04',
    });
  });
});
