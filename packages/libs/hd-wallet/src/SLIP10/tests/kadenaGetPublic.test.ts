import { describe, expect, it } from 'vitest';

import {
  kadenaGenMnemonic,
  kadenaGetPublic,
  kadenaMnemonicToSeed,
} from '../index.js';

describe('kadenaGetPublic', () => {
  it('should retrieve the public key from seed and the given index', async () => {
    const mnemonic = kadenaGenMnemonic();
    const password = 'password';
    const seed = await kadenaMnemonicToSeed(password, mnemonic);

    const publicKeyIndex0 = await kadenaGetPublic(password, seed, 0);
    const publicKeyIndex1 = await kadenaGetPublic(password, seed, 1);

    expect(publicKeyIndex0).toHaveLength(64);
    expect(publicKeyIndex1).toHaveLength(64);
    expect(publicKeyIndex1).not.toBe(publicKeyIndex0);
  });

  it('should retrieve distinct public keys from seedBuffer for different indexes', async () => {
    const mnemonic = kadenaGenMnemonic();
    const password = 'password';
    const seed = await kadenaMnemonicToSeed(password, mnemonic);

    const indexes = [0, 1, 2, 3, 4];
    const publicKeys = await Promise.all(
      indexes.map((index) => kadenaGetPublic(password, seed, index)),
    );

    publicKeys.forEach((publicKey) => {
      expect(publicKey).toHaveLength(64);
    });

    const uniquePublicKeys = new Set(publicKeys); // Check that all public keys are unique
    expect(uniquePublicKeys.size).toBe(indexes.length);
  });

  it('should get the similar public keys as Enkrypt for the same path', async () => {
    const password = 'pass';
    const seed = await kadenaMnemonicToSeed(
      password,
      // this mnemonic is generated by Enkrypt wallet
      'coyote utility final warfare thumb symbol mule scale final nominee behave crumble',
    );
    let publicKey = await kadenaGetPublic(
      password,
      seed,
      0,
      "m'/44'/626'/<index>/0'/0'",
    );
    expect(publicKey).toBe(
      '43726c4a2e7b03fa5d23635307e5b130baf8b261e1081c099a2b43db1d4554cc',
    );
    publicKey = await kadenaGetPublic(
      password,
      seed,
      1,
      "m'/44'/626'/<index>/0'/0'",
    );
    expect(publicKey).toBe(
      '3f53dfad097fdf8501c32b275e109980ed7121866a63ca34bb035c4a2e41a265',
    );
    publicKey = await kadenaGetPublic(
      password,
      seed,
      2,
      "m'/44'/626'/<index>/0'/0'",
    );
    expect(publicKey).toBe(
      '3021bcfa703cc4fac007ab4c5050df5c0b8ca7d655ea80c84af9ea5e43ecf0ff',
    );
  });
});
