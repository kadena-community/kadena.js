// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateDts add defpact functions to defpact property 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
    

      "defpact":{
        "test": () => string & { capability : ICapability_Coin_GAS} 
      }
    }
  }
}"
`;

exports[`generateDts adds IPactReference as the arg type if it is a module reference 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

interface ICapability_test_func {
  /**
  * this is defcap doc
  */
  (
    capabilityName: "user.test-module.test-cap", 
    name: string): ICap,
}

declare module '@kadena/client' {
  export interface IPactModules {
    /**
    this is module doc    
    */
    "user.test-module": {
      /**
      * this is defun doc
      */
      "test-func": (
        parameterone: PactReference,
        parametertwo: boolean) => string & { capability : ICapability_test_func & ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts adds module, capability and function docs to the dts file 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

interface ICapability_test_func {
  /**
  * this is defcap doc
  */
  (
    capabilityName: "user.test-module.test-cap", 
    name: string): ICap,
}

declare module '@kadena/client' {
  export interface IPactModules {
    /**
    this is module doc    
    */
    "user.test-module": {
      /**
      * this is defun doc
      */
      "test-func": (
        parameterone: object,
        parametertwo: boolean) => string & { capability : ICapability_test_func & ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts adds some _ to capabilityName to make it unique and avoid name collision if the capability function has also an argument exactly with the same name 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

interface ICapability_defpact_test_func {
  /**
  * this is defcap doc
  */
  (
    __capabilityName: "user.test-module.test-cap", 
    capabilityName: string, 
    _capabilityName: string): ICap,
}

declare module '@kadena/client' {
  export interface IPactModules {
    /**
    this is module doc    
    */
    "user.test-module": {
    

      "defpact":{
        /**
        * this is defpact doc
        */
        "test-func": (
          parameterone: any,
          parametertwo: any) => string & { capability : ICapability_defpact_test_func & ICapability_Coin_GAS} 
      }
    }
  }
}"
`;

exports[`generateDts does not generate capability interface if the function uses no capabilities 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
      "test-func": (
        parameterone: IPactDecimal,
        parametertwo: boolean) => string & { capability : ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts function parameter is empty if the defun has no param 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
      "test": () => string & { capability : ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts prefixes capabulities for defpact with defpact_ 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

interface ICapability_defpact_test_func {
  /**
  * this is defcap doc
  */
  (
    capabilityName: "user.test-module.test-cap", 
    name: string): ICap,
}

declare module '@kadena/client' {
  export interface IPactModules {
    /**
    this is module doc    
    */
    "user.test-module": {
    

      "defpact":{
        /**
        * this is defpact doc
        */
        "test-func": (
          parameterone: any,
          parametertwo: any) => string & { capability : ICapability_defpact_test_func & ICapability_Coin_GAS} 
      }
    }
  }
}"
`;

exports[`generateDts return type definition file for a module 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

interface ICapability_test_func {
  
  (
    capabilityName: "user.test-module.test-cap", 
    name: string): ICap,
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
      "test-func": (
        parameterone: string,
        parametertwo: boolean) => string & { capability : ICapability_test_func & ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts should generate the function also if return type is a list 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
      /**
      * Get all events
      */
      "get-events-list": () => string & { capability : ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts use any type if function parameters dont have a type 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

interface ICapability_test_func {
  
  (
    capabilityName: "user.test-module.test-cap", 
    name: string): ICap,
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
      "test-func": (
        parameterone: any,
        parametertwo: boolean) => string & { capability : ICapability_test_func & ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts use object type if function parameters is object{schema} 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

interface ICapability_test_func {
  
  (
    capabilityName: "user.test-module.test-cap", 
    name: string): ICap,
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
      "test-func": (
        parameterone: object,
        parametertwo: boolean) => string & { capability : ICapability_test_func & ICapability_Coin_GAS} 

    }
  }
}"
`;

exports[`generateDts uses the property type if there is no mapped value for that 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICapability_Coin_GAS {
  (name: 'coin.GAS'): ICap;
}

declare module '@kadena/client' {
  export interface IPactModules {
    
    "user.test-module": {
      "test": (param: any) => string & { capability : ICapability_Coin_GAS} 

    }
  }
}"
`;
