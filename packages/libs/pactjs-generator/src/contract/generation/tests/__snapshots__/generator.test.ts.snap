// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateDts > add defpact functions to defpact property 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {


      \\"defpact\\":{
\\"test\\": () => string & { capability : ICommonCapabilities; returnType : any} 
      }
    }
  }
}"
`;

exports[`generateDts > adds IPactReference as the arg type if it is a module reference 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_test_func {/**
* this is defcap doc
*/
(capabilityName: \\"user.test-module.test-cap\\",name: string): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    /**
* this is module doc
*/
    \\"user.test-module\\": {
/**
* this is defun doc
*/
\\"test-func\\": (parameterone: PactReference,parametertwo: boolean | PactReference) => string & { capability : ICapability_test_func & ICommonCapabilities; returnType : boolean} 

    }
  }
}"
`;

exports[`generateDts > adds module, capability and function docs to the dts file 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_test_func {/**
* this is defcap doc
*/
(capabilityName: \\"user.test-module.test-cap\\",name: string): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    /**
* this is module doc
*/
    \\"user.test-module\\": {
/**
* this is defun doc
*/
\\"test-func\\": (parameterone: object | PactReference,parametertwo: boolean | PactReference) => string & { capability : ICapability_test_func & ICommonCapabilities; returnType : boolean} 

    }
  }
}"
`;

exports[`generateDts > adds some _ to capabilityName to make it unique and avoid name collision if the capability function has also an argument exactly with the same name 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_defpact_test_func {/**
* this is defcap doc
*/
(__capabilityName: \\"user.test-module.test-cap\\",capabilityName: string,_capabilityName: string): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    /**
* this is module doc
*/
    \\"user.test-module\\": {


      \\"defpact\\":{
/**
* this is defpact doc
*/
\\"test-func\\": (parameterone: any,parametertwo: any) => string & { capability : ICapability_defpact_test_func & ICommonCapabilities; returnType : boolean} 
      }
    }
  }
}"
`;

exports[`generateDts > does not generate capability interface if the function uses no capabilities 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {
\\"test-func\\": (parameterone: IPactDecimal | PactReference,parametertwo: boolean | PactReference) => string & { capability : ICommonCapabilities; returnType : boolean} 

    }
  }
}"
`;

exports[`generateDts > function parameter is empty if the defun has no param 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {
\\"test\\": () => string & { capability : ICommonCapabilities; returnType : any} 

    }
  }
}"
`;

exports[`generateDts > prefixes capabulities for defpact with defpact_ 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_defpact_test_func {/**
* this is defcap doc
*/
(capabilityName: \\"user.test-module.test-cap\\",name: string): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    /**
* this is module doc
*/
    \\"user.test-module\\": {


      \\"defpact\\":{
/**
* this is defpact doc
*/
\\"test-func\\": (parameterone: any,parametertwo: any) => string & { capability : ICapability_defpact_test_func & ICommonCapabilities; returnType : boolean} 
      }
    }
  }
}"
`;

exports[`generateDts > return type definition file for a module 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_test_func {
(capabilityName: \\"user.test-module.test-cap\\",name: string): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {
\\"test-func\\": (parameterone: string | PactReference,parametertwo: boolean | PactReference) => string & { capability : ICapability_test_func & ICommonCapabilities; returnType : boolean} 

    }
  }
}"
`;

exports[`generateDts > should generate the function also if return type is a list 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {
/**
* Get all events
*/
\\"get-events-list\\": () => string & { capability : ICommonCapabilities; returnType : object[]} 

    }
  }
}"
`;

exports[`generateDts > use any type if function parameters dont have a type 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_test_func {
(capabilityName: \\"user.test-module.test-cap\\",name: string): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {
\\"test-func\\": (parameterone: any,parametertwo: boolean | PactReference) => string & { capability : ICapability_test_func & ICommonCapabilities; returnType : boolean} 

    }
  }
}"
`;

exports[`generateDts > use object type if function parameters is object{schema} 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_test_func {
(capabilityName: \\"user.test-module.test-cap\\",name: string): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {
\\"test-func\\": (parameterone: object | PactReference,parametertwo: boolean | PactReference) => string & { capability : ICapability_test_func & ICommonCapabilities; returnType : boolean} 

    }
  }
}"
`;

exports[`generateDts > uses object as type when the capability accepts guard 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

interface ICapability_defpact_test_func {/**
* this is defcap doc
*/
(_capabilityName: \\"user.test-module.test-cap\\",capabilityName: string,guard: string | object): ICap,}

declare module '@kadena/client' {
  interface IPactModules {
    /**
* this is module doc
*/
    \\"user.test-module\\": {


      \\"defpact\\":{
/**
* this is defpact doc
*/
\\"test-func\\": (parameterone: string | PactReference,guard: PactReference) => string & { capability : ICapability_defpact_test_func & ICommonCapabilities; returnType : boolean} 
      }
    }
  }
}"
`;

exports[`generateDts > uses the property type if there is no mapped value for that 1`] = `
"
import type { PactReference } from '@kadena/client';
import type { IPactDecimal, IPactInt, ICap } from '@kadena/types';

interface ICommonCapabilities {
  (name: 'coin.GAS'): ICap;
  // let users use any other capabilities that can not be inferred
  (name: string, ...args: any[]): ICap;
}

declare module '@kadena/client' {
  interface IPactModules {
    
    \\"user.test-module\\": {
\\"test\\": (param: any) => string & { capability : ICommonCapabilities; returnType : any} 

    }
  }
}"
`;
