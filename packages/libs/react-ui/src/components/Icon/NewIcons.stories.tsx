/* eslint-disable @kadena-dev/no-eslint-disable */
/* eslint-disable @typescript-eslint/naming-convention */
import * as BranchIcons from '@kadena/react-icons/brand';
import * as ProductIcons from '@kadena/react-icons/product';
import * as SystemIcons from '@kadena/react-icons/system';

import type { Meta, StoryObj } from '@storybook/react';
import React, { useState } from 'react';
import { useFilter } from 'react-aria';
import { atoms, tokens } from '../../styles';
import { TextField } from '../Form/TextField';

const iconColors = {
  primary: tokens.kda.foundation.color.icon.brand.primary.default,
  secondary: tokens.kda.foundation.color.icon.brand.secondary.default,
  info: tokens.kda.foundation.color.icon.semantic.info.default,
  negative: tokens.kda.foundation.color.icon.semantic.negative.default,
  positive: tokens.kda.foundation.color.icon.semantic.positive.default,
  warning: tokens.kda.foundation.color.icon.semantic.warning.default,
  base: tokens.kda.foundation.color.icon.base.default,
};
type IconColor = keyof typeof iconColors;
const icoSizes = tokens.kda.foundation.icon.size;
type IconSize = keyof typeof icoSizes;

const meta: Meta<{}> = {
  title: 'Icons/NewIcons',
  parameters: {
    status: {
      type: ['experimental'],
    },
    docs: {
      description: {
        component: 'Design system icons generated by svgr',
      },
    },
  },
  argTypes: {
    fontSize: {
      description:
        'Icon width/height are set to 1em during generation, this is the conventional way to deal icon size, so to change the size we change fontSize',
      options: Object.keys(icoSizes) as IconSize[],
      control: {
        type: 'select',
      },
    },
    fill: {
      description: 'Fill color',
      options: Object.keys(iconColors) as IconColor[],
      control: {
        type: 'select',
      },
    },
  },
};

export default meta;

type Story = StoryObj<{
  fontSize: IconSize;
  fill: IconColor;
}>;

const system = Object.entries(SystemIcons);
const product = Object.entries(ProductIcons);
const brand = Object.entries(BranchIcons);
export const System: Story = {
  name: 'System',
  args: {
    fontSize: 'base',
    fill: 'base',
  },
  render: ({ fontSize, fill }) => {
    const { contains } = useFilter({ sensitivity: 'base', usage: 'search' });
    const [search, setSearch] = useState('');
    return (
      <div
        className={atoms({
          display: 'flex',
          flexDirection: 'column',
          gap: 'md',
          width: '100%',
        })}
      >
        <TextField
          label="Search"
          placeholder="Search for an icon by name"
          onChange={(e) => {
            setSearch(e.target.value);
          }}
        />
        <div
          className={atoms({
            display: 'flex',
            flexWrap: 'wrap',
            flex: 1,
            gap: 'sm',
          })}
        >
          {system
            .filter(([key]) =>
              contains(key.toLowerCase(), search.toLowerCase()),
            )
            .map(([key, Icon]) => (
              <Icon
                key={key}
                fontSize={icoSizes[fontSize]}
                fill={iconColors[fill]}
                title={key}
              />
            ))}
        </div>
      </div>
    );
  },
};

export const Brand: Story = {
  name: 'Brand',
  args: {
    fontSize: 'xxl',
    fill: 'base',
  },
  render: ({ fontSize, fill }) => {
    const { contains } = useFilter({ sensitivity: 'base', usage: 'search' });
    const [search, setSearch] = useState('');
    return (
      <div
        className={atoms({
          display: 'flex',
          flexDirection: 'column',
          gap: 'md',
          width: '100%',
        })}
      >
        <TextField
          label="Search"
          placeholder="Search for an icon by name"
          onChange={(e) => {
            setSearch(e.target.value);
          }}
        />
        <div
          className={atoms({
            display: 'flex',
            flexWrap: 'wrap',
            flex: 1,
            gap: 'sm',
          })}
        >
          {brand
            .filter(([key]) =>
              contains(key.toLowerCase(), search.toLowerCase()),
            )
            .map(([key, Icon]) => (
              <Icon
                key={key}
                fontSize={icoSizes[fontSize]}
                fill={iconColors[fill]}
                title={key}
              />
            ))}
        </div>
      </div>
    );
  },
};

export const Product: Story = {
  name: 'Product',
  args: {
    fontSize: 'xxl',
    fill: 'base',
  },
  render: ({ fontSize, fill }) => {
    const { contains } = useFilter({ sensitivity: 'base', usage: 'search' });
    const [search, setSearch] = useState('');
    return (
      <div
        className={atoms({
          display: 'flex',
          flexDirection: 'column',
          gap: 'md',
          width: '100%',
        })}
      >
        <TextField
          label="Search"
          placeholder="Search for an icon by name"
          onChange={(e) => {
            setSearch(e.target.value);
          }}
        />
        <div
          className={atoms({
            display: 'flex',
            flexWrap: 'wrap',
            flex: 1,
            gap: 'sm',
          })}
        >
          {product
            .filter(([key]) =>
              contains(key.toLowerCase(), search.toLowerCase()),
            )
            .map(([key, Icon]) => (
              <Icon
                key={key}
                fontSize={icoSizes[fontSize]}
                fill={iconColors[fill]}
                title={key}
              />
            ))}
        </div>
      </div>
    );
  },
};
