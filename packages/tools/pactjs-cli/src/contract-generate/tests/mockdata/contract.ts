export const mockContract: string =
  '(module crankk01 GOVERNANCE\n\n  @doc " Adapted from Kadena\'s coin.pact contract and finprint... "\n\n  @model\n    [ (defproperty conserves-mass (amount:decimal)\n        (= (column-delta crankk01-token-table \'balance) 0.0))\n\n      (defproperty valid-account-id (accountId:string)\n        (and\n          (>= (length accountId) 3)\n          (<= (length accountId) 256)))\n    ]\n\n  (implements fungible-v2)\n\n  ; --------------------------------------------------------------------------\n  ; Schemas and Tables\n\n  (defschema token-schema\n    @doc " An account, holding a token balance. \\\n         \\ \\\n         \\ ROW KEY: accountId. "\n    balance:decimal\n    guard:guard\n  )\n  (deftable crankk01-token-table:{token-schema})\n\n  ; --------------------------------------------------------------------------\n  ; Capatilibites\n\n  (defcap GOVERNANCE\n    ()\n\n    @doc " Give the admin full access to call and upgrade the module.. "\n\n    (enforce-keyset \'admin-crankk01)\n  )\n\n  (defcap ACCOUNT_GUARD\n    ( accountId:string )\n    @doc " Look up the guard for an account, required to debit from that account. "\n    (enforce-guard (at \'guard (read crankk01-token-table accountId [\'guard])))\n  )\n\n  (defcap DEBIT\n    ( sender:string )\n\n    @doc " Capability to perform debiting operations. "\n\n    (enforce-guard (at \'guard (read crankk01-token-table sender [\'guard])))\n    (enforce (!= sender "") "Invalid sender.")\n  )\n\n  (defcap CREDIT\n    ( receiver:string )\n\n    @doc " Capability to perform crediting operations. "\n\n    (enforce (!= receiver "") "Invalid receiver.")\n  )\n\n  (defcap TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal )\n\n    @doc " Capability to perform transfer between two accounts. "\n\n    @managed amount TRANSFER-mgr\n\n    (enforce (!= sender receiver) "Sender cannot be the receiver.")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) "Transfer amount must be positive.")\n    (compose-capability (DEBIT sender))\n    (compose-capability (CREDIT receiver))\n  )\n\n  (defun TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal )\n\n    (let ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format "TRANSFER exceeded for balance {}" [managed]))\n      newbal\n    )\n  )\n\n  ; --------------------------------------------------------------------------\n  ; Constants\n\n  (defconst ROOT_ACCOUNT_ID:string \'ROOT\n    " ID for the account which initially owns all the tokens.  ")\n\n  (defconst INITIAL_SUPPLY:decimal 10000000.0\n    " Total supply of 200 million tokens. (10M x 20 chains)")\n\n  (defconst DECIMALS 12\n    " Specifies the minimum denomination for token transactions. ")\n\n  (defconst ACCOUNT_ID_CHARSET CHARSET_LATIN1\n    " Allowed character set for account IDs. ")\n\n  (defconst ACCOUNT_ID_PROHIBITED_CHARACTER "$")\n\n  (defconst ACCOUNT_ID_MIN_LENGTH 3\n    " Minimum character length for account IDs. ")\n\n  (defconst ACCOUNT_ID_MAX_LENGTH 256\n    " Maximum character length for account IDs. ")\n\n\n  ; --------------------------------------------------------------------------\n  ; Utilities\n\n  (defun validate-account-id\n    ( accountId:string )\n\n    @doc " Enforce that an account ID meets charset and length requirements. "\n\n    (enforce\n      (is-charset ACCOUNT_ID_CHARSET accountId)\n      (format\n        "Account ID does not conform to the required charset: {}"\n        [accountId]))\n\n    (enforce\n      (not (contains accountId ACCOUNT_ID_PROHIBITED_CHARACTER))\n      (format "Account ID contained a prohibited character: {}" [accountId]))\n\n    (let ((accountLength (length accountId)))\n\n      (enforce\n        (>= accountLen6h ACCOUNT_ID_MIN_LENGTH)\n        (format\n          "Account ID does not conform to the min length requirement: {}"\n          [accountId]))\n\n      (enforce\n        (<= accountLength ACCOUNT_ID_MAX_LENGTH)\n        (format\n          "Account ID does not conform to the max length requirement: {}"\n          [accountId]))\n    )\n  )\n\n  ;; ; --------------------------------------------------------------------------\n  ;; ; Fungible-v2 Implementation\n\n  (defun transfer-create:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal )\n\n    @doc " Transfer to an account, creating it if it does not exist. "\n\n    @model [ (property (conserves-mass amount))\n             (property (> amount 0.0))\n             (property (valid-account-id sender))\n             (property (valid-account-id receiver))\n             (property (!= sender receiver)) ]\n\n    (with-capability (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit receiver receiver-guard amount)\n    )\n  )\n\n  (defun transfer:string\n    ( sender:string\n      receiver:string\n      amount:decimal )\n\n    @doc " Transfer to an account, failing if the account does not exist. "\n\n    @model [ (property (conserves-mass amount))\n             (property (> amount 0.0))\n             (property (valid-account-id sender))\n             (property (valid-account-id receiver))\n             (property (!= sender receiver)) ]\n\n    (with-read crankk01-token-table receiver\n      { "guard" := guard }\n      (transfer-create sender receiver guard amount)\n    )\n  )\n\n  (defun debit\n    ( accountId:string\n      amount:decimal )\n\n    @doc " Decrease an account balance. Internal use only. "\n\n    @model [ (property (> amount 0.0))\n             (property (valid-account-id accountId))\n           ]\n\n    (validate-account-id accountId)\n    (enforce (> amount 0.0) "Debit amount must be positive.")\n    (enforce-unit amount)\n    (require-capability (DEBIT accountId))\n\n    (with-read crankk01-token-table accountId\n      { "balance" := balance }\n\n      (enforce (<= amount balance) "Insufficient funds.")\n\n      (update crankk01-token-table accountId\n        { "balance" : (- balance amount) }\n      )\n    )\n  )\n\n  (defun credit\n    ( accountId:string\n      guard:guard\n      amount:decimal )\n\n    @doc " Increase an account balance. Internal use only. "\n\n    @model [ (property (> amount 0.0))\n             (property (valid-account-id accountId))\n           ]\n\n    (validate-account-id accountId)\n    (enforce (> amount 0.0) "Credit amount must be positive.")\n    (enforce-unit amount)\n    (require-capability (CREDIT accountId))\n\n    (with-default-read crankk01-token-table accountId\n      { "balance" : -1.0, "guard" : guard }\n      { "balance" := balance, "guard" := retg }\n      ; we don\'t want to overwrite an existing guard with the user-supplied one\n      (enforce (= retg guard)\n        "account guards do not match")\n\n      (let ((is-new\n             (if (= balance -1.0)\n                 (enforce-reserved accountId guard)\n               false)))\n\n        (write crankk01-token-table accountId\n          { "balance" : (if is-new amount (+ balance amount))\n          , "guard"   : retg\n          }))\n      ))\n\n  (defun check-reserved:string (accountId:string)\n    " Checks ACCOUNT for reserved name and returns type if \\\n    \\ found or empty string. Reserved names start with a \\\n    \\ single char and colon, e.g. \'c:foo\', which would return \'c\' as type."\n    (let ((pfx (take 2 accountId)))\n      (if (= ":" (take -1 pfx)) (take 1 pfx) "")))\n\n  (defun enforce-reserved:bool (accountId:string guard:guard)\n    @doc "Enforce reserved account name protocols."\n    (let ((r (check-reserved accountId)))\n      (if (= "" r) true\n        (if (= "k" r)\n          (enforce\n            (= (format "{}" [guard])\n               (format "KeySet {keys: [{}],pred: keys-all}"\n                       [(drop 2 accountId)]))\n            "Single-key account protocol violation")\n          (enforce false\n            (format "Unrecognized reserved protocol: {}" [r]))))))\n\n  (defschema crosschain-schema\n    @doc " Schema for yielded value in cross-chain transfers "\n    receiver:string\n    receiver-guard:guard\n    amount:decimal\n  )\n\n  (defpact transfer-crosschain:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      target-chain:string\n      amount:decimal )\n\n    @model [ (property (> amount 0.0))\n             (property (!= receiver ""))\n             (property (valid-account-id sender))\n             (property (valid-account-id receiver))\n           ]\n\n    (step\n      (with-capability (DEBIT sender)\n\n        (validate-account-id sender)\n        (validate-account-id receiver)\n\n        (enforce (!= "" target-chain) "empty target-chain")\n        (enforce (!= (at \'chain-id (chain-data)) target-chain)\n          "cannot run cross-chain transfers to the same chain")\n\n        (enforce (> amount 0.0)\n          "transfer quantity must be positive")\n\n        (enforce-unit amount)\n\n        ;; Step 1 - debit sender account on current chain\n        (debit sender amount)\n\n        (let\n          ((\n            crosschain-details:object{crosschain-schema}\n            { "receiver"       : receiver\n            , "receiver-guard" : receiver-guard\n            , "amount"         : amount\n            }\n          ))\n          (yield crosschain-details target-chain)\n        )\n      )\n    )\n\n    (step\n      (resume\n        { "receiver"       := receiver\n        , "receiver-guard" := receiver-guard\n        , "amount"         := amount\n        }\n        ;; Step 2 - credit receiver account on target chain\n        (with-capability (CREDIT receiver)\n          (credit receiver receiver-guard amount)\n        )\n      )\n    )\n  )\n\n  (defun get-balance:decimal\n    ( account:string )\n\n    (at \'balance (read crankk01-token-table account [\'balance]))\n  )\n\n  (defun details:object{fungible-v2.account-details}\n    ( account:string )\n\n    (with-read crankk01-token-table account\n      { "balance" := balance\n      , "guard"   := guard\n      }\n      { "account" : account\n      , "balance" : balance\n      , "guard"   : guard\n      }\n    )\n  )\n\n  (defun precision:integer\n    ()\n\n    DECIMALS\n  )\n\n  (defun enforce-unit:bool\n    ( amount:decimal )\n\n    @doc " Enforce the minimum denomination for token transactions. "\n\n    (enforce\n      (= (floor amount DECIMALS) amount)\n      (format "Amount violates minimum denomination: {}" [amount])\n    )\n  )\n\n  (defun create-account:string\n    ( account:string\n      guard:guard )\n\n    @doc " Create a new account. "\n\n    @model [ (property (valid-account-id account)) ]\n\n    (validate-account-id account)\n    (enforce-reserved account guard)\n\n    (insert crankk01-token-table account\n      { "balance" : 0.0\n      , "guard"   : guard\n      }\n    )\n  )\n\n  (defun rotate:string\n    ( account:string\n      new-guard:guard )\n\n    (with-read crankk01-token-table account\n      { "guard" := oldGuard }\n\n      (enforce-guard oldGuard)\n      (enforce-guard new-guard)\n\n      (update crankk01-token-table account\n        { "guard" : new-guard }\n      )\n    )\n  )\n\n  ;; ; -------------------------------------------------------------------------\n  ;; ; Custom Functions\n\n;   (defun initialize:string\n;     ()\n\n;     @doc " Initialize the contract. \\\n;          \\ Admin-only. Should fail if it has been called before. "\n\n;     (with-capability (GOVERNANCE)\n;       (create-account ROOT_ACCOUNT_ID (create-module-guard "root-account"))\n;       (update crankk01-token-table ROOT_ACCOUNT_ID { "balance" : INITIAL_SUPPLY })\n;     )\n;   )\n\n;   (defun get-details ()\n;     (select crankk01-token-table (constantly true)) \n;   )\n\n;   (defun get-keys () \n;     (keys crankk01-token-table) \n;   )\n\n)\n\n';
