generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  chainId         BigInt        @map("chainid")
  creationTime    DateTime      @map("creationtime") @db.Timestamptz(6)
  epoch           DateTime      @db.Timestamptz(6)
  flags           Decimal       @db.Decimal(20, 0)
  hash            String        @id @db.VarChar
  height          BigInt
  minerAccount    String        @map("miner") @db.VarChar
  nonce           Decimal       @db.Decimal(20, 0)
  parentBlockHash String        @map("parent") @db.VarChar
  payloadHash     String        @map("payload") @db.VarChar
  powHash         String        @map("powhash") @db.VarChar
  predicate       String        @db.VarChar
  target          Decimal       @db.Decimal(80, 0)
  weight          Decimal       @db.Decimal(80, 0)
  id              Int           @unique(map: "blocks_id_uniq") @default(autoincrement())
  events          Event[]
  minerKeys       MinerKey[]
  transactions    Transaction[]
  transfers       Transfer[]

  @@index([height(sort: Desc), chainId])
  @@map("blocks")
}

model Event {
  blockHash     String       @map("block") @db.VarChar
  chainId       BigInt       @map("chainid")
  height        BigInt
  orderIndex    BigInt       @map("idx")
  moduleName    String       @map("module") @db.VarChar
  moduleHash    String       @map("modulehash") @db.VarChar
  name          String       @db.VarChar
  parameters    Json         @map("params")
  parameterText String       @map("paramtext") @db.VarChar
  qualifiedName String       @map("qualname") @db.VarChar
  requestKey    String       @map("requestkey") @db.VarChar
  id            Int          @unique(map: "events_id_uniq") @default(autoincrement())
  transaction   Transaction? @relation(fields: [blockHash, requestKey], references: [blockHash, requestKey])
  block         Block        @relation(fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction)

  @@id([blockHash, orderIndex, requestKey])
  @@index([height(sort: Desc), chainId, orderIndex], map: "events_height_chainid_orderIndex")
  @@index([requestKey])
  @@map("events")
}

model MinerKey {
  blockHash String @map("block") @db.VarChar
  key       String @db.VarChar
  blocks    Block  @relation(fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction)

  @@id([blockHash, key])
  @@map("minerkeys")
}

model Signer {
  address      String? @map("addr") @db.VarChar
  capabilities Json    @map("caps")
  orderIndex   Int     @map("idx")
  publicKey    String  @map("pubkey") @db.VarChar
  requestKey   String  @map("requestkey") @db.VarChar
  scheme       String? @db.VarChar
  signature    String  @map("sig") @db.VarChar

  @@id([requestKey, orderIndex])
  @@map("signers")
}

model Transaction {
  badResult     Json?      @map("badresult")
  blockHash     String     @map("block") @db.VarChar
  chainId       BigInt     @map("chainid")
  code          String?    @db.VarChar
  continuation  Json?
  creationTime  DateTime   @map("creationtime") @db.Timestamptz(6)
  data          Json?
  gas           BigInt
  gasLimit      BigInt     @map("gaslimit")
  gasPrice      Float      @map("gasprice")
  goodResult    Json?      @map("goodresult")
  height        BigInt
  logs          String?    @db.VarChar
  metadata      Json?
  nonce         String     @db.VarChar
  eventCount    BigInt?    @map("num_events")
  pactId        String?    @map("pactid") @db.VarChar
  proof         String?    @db.VarChar
  requestKey    String     @map("requestkey") @db.VarChar
  rollback      Boolean?
  senderAccount String     @map("sender") @db.VarChar
  step          BigInt?
  ttl           BigInt
  transactionId BigInt?    @map("txid")
  events        Event[]
  block         Block      @relation(fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction)
  transfers     Transfer[]

  @@id([blockHash, requestKey], map: "transaction_pkey")
  @@index([height])
  @@index([requestKey])
  @@map("transactions")
}

model Transfer {
  amount          Decimal      @db.Decimal
  blockHash       String       @map("block") @db.VarChar
  chainId         BigInt       @map("chainid")
  senderAccount   String       @map("from_acct") @db.VarChar
  height          BigInt
  orderIndex      BigInt       @map("idx")
  moduleHash      String       @map("modulehash") @db.VarChar
  moduleName      String       @map("modulename") @db.VarChar
  requestKey      String       @map("requestkey") @db.VarChar
  receiverAccount String       @map("to_acct") @db.VarChar
  block           Block        @relation(fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction)
  transaction     Transaction? @relation(fields: [blockHash, requestKey], references: [blockHash, requestKey], onDelete: NoAction, onUpdate: NoAction)

  @@id([blockHash, chainId, orderIndex, moduleHash, requestKey])
  @@index([senderAccount, height(sort: Desc), orderIndex], map: "transfers_senderAccount_height_orderIndex")
  @@index([receiverAccount, height(sort: Desc), orderIndex])
  @@map("transfers")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model schema_migrations {
  filename    String   @db.VarChar(512)
  checksum    String   @db.VarChar(32)
  executed_at DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view reconcile {
  token             String?
  amount            Int?
  sender            String?
  sender_current    Int?
  sender_previous   Int?
  receiver          String?
  receiver_current  Int?
  receiver_previous Int?
  chainid           BigInt?
  height            BigInt?
  requestKey        String  @map("requestkey") @db.VarChar
  orderIndex        BigInt  @map("idx")
  blockHash         String  @map("block") @db.VarChar
  id                Int?
  version           String?

  @@id([blockHash, orderIndex, requestKey])
}
