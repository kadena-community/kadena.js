generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  chainId         BigInt        @map("chainid")
  creationTime    DateTime      @db.Timestamptz(6) @map("creationtime")
  epoch           DateTime      @db.Timestamptz(6)
  flags           Decimal       @db.Decimal(20, 0)
  hash            String        @id @db.VarChar
  height          BigInt
  minerAccount    String        @db.VarChar @map("miner")
  nonce           Decimal       @db.Decimal(20, 0)
  parentBlockHash String        @db.VarChar @map("parent")
  payload         String        @db.VarChar
  powHash         String        @db.VarChar @map("powhash")
  predicate       String        @db.VarChar
  target          Decimal       @db.Decimal(80, 0)
  weight          Decimal       @db.Decimal(80, 0)
  id              Int           @unique(map: "blocks_id_uniq") @default(autoincrement())
  events          Event[]
  minerKeys       Minerkey[]
  transactions    Transaction[]
  transfers       Transfer[]

  @@index([height(sort: Desc), chainId])
  @@map("blocks")
}

model Event {
  blockHash     String        @db.VarChar @map("block")
  chainId       BigInt        @map("chainid")
  height        BigInt
  orderIndex    BigInt        @map("idx")
  moduleName    String        @db.VarChar @map("module")
  moduleHash    String        @db.VarChar @map("modulehash")
  name          String        @db.VarChar
  parameters    Json          @map("params")
  parameterText String        @db.VarChar @map("paramtext")
  qualifiedName String        @db.VarChar @map("qualname")
  requestKey    String        @db.VarChar @map("requestkey")
  id            Int           @unique(map: "events_id_uniq") @default(autoincrement())
  transaction   Transaction?  @relation(fields: [blockHash, requestKey], references: [blockHash, requestKey])
  block         Block         @relation(fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction)

  @@id([blockHash, orderIndex, requestKey])
  @@index([height(sort: Desc), chainId, orderIndex], map: "events_height_chainid_orderIndex")
  @@index([requestKey])
  @@map("events")
}

model Minerkey {
  blockHash String @db.VarChar @map("block")
  key       String @db.VarChar
  blocks    Block  @relation(fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction)

  @@id([blockHash, key])
  @@map("minerkeys")
}

model Signer {
  address       String? @db.VarChar @map("addr")
  capabilities  Json    @map("caps")
  orderIndex    Int     @map("idx")
  publicKey     String  @db.VarChar @map("pubkey")
  requestKey    String  @db.VarChar @map("requestkey")
  scheme        String? @db.VarChar
  signature     String  @db.VarChar @map("sig")

  @@id([orderIndex, requestKey])
  @@map("signers")
}

model Transaction {
  badResult     Json?     @map("badresult")
  blockHash     String    @map("block")
  chainId       BigInt    @map("chainid")
  code          String?   @db.VarChar
  continuation  Json?
  creationTime  DateTime  @db.Timestamptz(6) @map("creationtime")
  data          Json?
  gas           BigInt
  gasLimit      BigInt    @map("gaslimit")
  gasPrice      Float     @map("gasprice")
  goodResult    Json?     @map("goodresult")
  height        BigInt
  logs          String?   @db.VarChar
  metadata      Json?
  nonce         String    @db.VarChar
  eventCount    BigInt?   @map("num_events")
  pactId        String?   @db.VarChar @map("pactid")
  proof         String?   @db.VarChar
  requestKey    String    @db.VarChar @map("requestkey")
  rollback      Boolean?
  sender        String    @db.VarChar
  step          BigInt?
  ttl           BigInt
  transactionId BigInt?   @map("txid")
  events        Event[]
  block         Block    @relation(fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction)

  @@id([blockHash, requestKey], map: "transaction_pkey")
  @@index([height])
  @@index([requestKey])
  @@map("transactions")
}

model Transfer {
  amount          Decimal @db.Decimal
  block           String  @db.VarChar
  chainId         BigInt  @map("chainid")
  senderAccount   String  @db.VarChar @map("from_acct")
  height          BigInt
  orderIndex      BigInt  @map("idx")
  moduleHash      String  @db.VarChar @map("modulehash")
  moduleName      String  @db.VarChar @map("modulename")
  requestKey      String  @db.VarChar @map("requestkey")
  receiverAccount String  @db.VarChar @map("to_acct")
  blocks          Block   @relation(fields: [block], references: [hash], onDelete: NoAction, onUpdate: NoAction)

  @@id([block, chainId, orderIndex, moduleHash, requestKey])
  @@index([senderAccount, height(sort: Desc), orderIndex], map: "transfers_senderAccount_height_orderIndex")
  @@index([receiverAccount, height(sort: Desc), orderIndex])
  @@map("transfers")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model schema_migrations {
  filename    String   @db.VarChar(512)
  checksum    String   @db.VarChar(32)
  executed_at DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}


