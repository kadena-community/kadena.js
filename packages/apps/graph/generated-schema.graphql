"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Block implements Node {
  chainId: BigInt!
  confirmationDepth: Int!
  creationTime: DateTime!
  epoch: DateTime!
  hash: ID!
  height: BigInt!
  id: ID!
  minerKeys: [MinerKey!]
  parent: Block
  parentHash: String
  payloadHash: String!
  powHash: String!
  predicate: String!
  transactions(after: String, before: String, first: Int, last: Int): BlockTransactionsConnection!
}

type BlockTransactionsConnection {
  edges: [BlockTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlockTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type ChainModuleAccount implements Node {
  accountName: String!
  balance: Float!
  chainId: ID!
  guard: Guard!
  id: ID!
  moduleName: String!
  transactions(after: String, before: String, first: Int, last: Int): ChainModuleAccountTransactionsConnection!
  transfers(after: String, before: String, first: Int, last: Int): ChainModuleAccountTransfersConnection!
}

type ChainModuleAccountTransactionsConnection {
  edges: [ChainModuleAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChainModuleAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type ChainModuleAccountTransfersConnection {
  edges: [ChainModuleAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChainModuleAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Floats that will have a value of 0 or more."""
scalar Decimal

type Event implements Node {
  block: Block!
  chainId: BigInt!
  height: BigInt!
  id: ID!
  moduleName: String!
  name: String!
  orderIndex: BigInt!
  parameterText: String!
  qualifiedName: String!
  requestKey: String!
  transaction: Transaction
}

"""General information about the graph and chainweb-data"""
type GraphConfiguration {
  maximumConfirmationDepth: Int!
  minimumBlockHeight: BigInt
}

type Guard {
  keys: [String!]!
  predicate: String!
}

type MinerKey implements Node {
  block: Block!
  blockHash: String!
  id: ID!
  key: String!
}

type ModuleAccount implements Node {
  accountName: String!
  chainAccounts: [ChainModuleAccount!]!
  id: ID!
  moduleName: String!
  totalBalance: Decimal!
  transactions(after: String, before: String, first: Int, last: Int): ModuleAccountTransactionsConnection!
  transfers(after: String, before: String, first: Int, last: Int): ModuleAccountTransfersConnection!
}

type ModuleAccountTransactionsConnection {
  edges: [ModuleAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ModuleAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type ModuleAccountTransfersConnection {
  edges: [ModuleAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ModuleAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

interface Node {
  id: ID!
}

input PactQuery {
  chainId: String!
  code: String!
  data: [PactQueryData!]
}

input PactQueryData {
  key: String!
  value: String!
}

input PactTransaction {
  cmd: String!
  hash: String
  sigs: [String!]
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Floats that will have a value greater than 0."""
scalar PositiveFloat

type Query {
  account(accountName: String!, moduleName: String!): ModuleAccount!
  block(hash: String!): Block
  blocksFromHeight(chainIds: [Int!], startHeight: Int!): [Block!]!
  chainAccount(accountName: String!, chainId: String!, moduleName: String!): ChainModuleAccount
  completedBlockHeights(chainIds: [String!], completedHeights: Boolean, heightCount: Int): [Block!]!
  gasLimitEstimate(transaction: PactTransaction!): Int!
  gasLimitEstimates(transactions: [PactTransaction!]!): [Int!]!
  graphConfiguration: GraphConfiguration!
  lastBlockHeight: BigInt
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  pactQueries(pactQuery: [PactQuery!]!): [String!]!
  pactQuery(pactQuery: PactQuery!): String!
  transactions(accountName: String, after: String, before: String, blockHash: String, chainId: String, first: Int, last: Int, moduleName: String, requestKey: String): QueryTransactionsConnection!
  transactionsByPublicKey(after: String, before: String, first: Int, last: Int, publicKey: String!): QueryTransactionsByPublicKeyConnection!
  transfers(accountName: String, after: String, before: String, chainId: String, first: Int, last: Int, moduleName: String): QueryTransfersConnection!
}

type QueryTransactionsByPublicKeyConnection {
  edges: [QueryTransactionsByPublicKeyConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransactionsByPublicKeyConnectionEdge {
  cursor: String!
  node: Transaction!
}

type QueryTransactionsConnection {
  edges: [QueryTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type QueryTransfersConnection {
  edges: [QueryTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

type Signer implements Node {
  address: String
  capabilities: String
  id: ID!
  orderIndex: Int!
  publicKey: String!
  requestKey: String!
  scheme: String
  signature: String!
}

type Subscription {
  event(eventName: String!): [Event!]
  newBlocks(chainIds: [Int!]): [Block!]
  transaction(requestKey: String!): Transaction
}

type Transaction implements Node {
  badResult: String
  block: Block
  chainId: BigInt!
  code: String!
  continuation: String
  creationTime: DateTime!
  data: String
  eventCount: BigInt
  events: [Event!]
  gas: BigInt!
  gasLimit: BigInt!
  gasPrice: Float!
  goodResult: String
  height: BigInt!
  id: ID!
  logs: String
  metadata: String
  nonce: String
  pactId: String
  proof: String
  requestKey: String!
  rollback: Boolean
  senderAccount: String
  signers: [Signer!]
  step: BigInt
  transactionId: BigInt
  transfers: [Transfer!]
  ttl: BigInt!
}

type Transfer implements Node {
  amount: Decimal!
  blockHash: String!
  blocks: [Block!]!
  chainId: BigInt!
  crossChainTransfer: Transfer
  height: BigInt!
  id: ID!
  moduleHash: String!
  moduleName: String!
  orderIndex: BigInt!
  receiverAccount: String!
  requestKey: String!
  senderAccount: String!
  transaction: Transaction
}