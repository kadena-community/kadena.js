"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""A unit of information that stores a set of verified transactions."""
type Block implements Node {
  chainId: BigInt!
  creationTime: DateTime!

  """
  The moment the difficulty is adjusted to maintain a block validation time of 30 seconds.
  """
  epoch: DateTime!
  events(after: String, before: String, first: Int, last: Int): BlockEventsConnection!
  hash: ID!
  height: BigInt!
  id: ID!
  minerAccount: FungibleChainAccount!
  parent: Block
  payloadHash: String!

  """The proof of work hash."""
  powHash: String!
  transactions(after: String, before: String, first: Int, last: Int): BlockTransactionsConnection!
}

type BlockEventsConnection {
  edges: [BlockEventsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlockEventsConnectionEdge {
  cursor: String!
  node: Event!
}

type BlockTransactionsConnection {
  edges: [BlockTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlockTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

"""The payload of an cont transaction."""
type ContinuationPayload {
  """
  The environment data made available to the transaction. Formatted as raw JSON.
  """
  data: String!

  """
  A unique id when a pact (defpact) is initiated. See the "Pact execution scope and pact-id" explanation in the docs for more information.
  """
  pactId: String

  """The proof provided to continue the cross-chain transaction."""
  proof: String

  """Whether or not this transaction can be rolled back."""
  rollback: Boolean

  """
  The step-number when this is an execution of a `defpact`, aka multi-step transaction.
  """
  step: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Floats that will have a value of 0 or more."""
scalar Decimal

"""An event emitted by the execution of a smart-contract function."""
type Event implements Node {
  block: Block!
  chainId: BigInt!

  """The height of the block where the event was emitted."""
  height: BigInt!
  id: ID!
  incrementedId: Int!
  moduleName: String!
  name: String!

  """
  The order index of this event, in the case that there are multiple events.
  """
  orderIndex: BigInt!
  parameterText: String!
  parameters: String

  """
  The full eventname, containing module and eventname, e.g. coin.TRANSFER
  """
  qualifiedName: String!
  requestKey: String!
  transaction: Transaction
}

"""The payload of an exec transaction."""
type ExecutionPayload {
  """
  The Pact expressions executed in this transaction when it is an `exec` transaction.
  """
  code: String

  """
  The environment data made available to the transaction. Formatted as raw JSON.
  """
  data: String!
}

"""A fungible-specific account."""
type FungibleAccount implements Node {
  accountName: String!
  chainAccounts: [FungibleChainAccount!]!
  fungibleName: String!
  id: ID!
  totalBalance: Decimal!
  transactions(after: String, before: String, first: Int, last: Int): FungibleAccountTransactionsConnection!
  transfers(after: String, before: String, first: Int, last: Int): FungibleAccountTransfersConnection!
}

type FungibleAccountTransactionsConnection {
  edges: [FungibleAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type FungibleAccountTransfersConnection {
  edges: [FungibleAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""A fungible specific chain-account."""
type FungibleChainAccount implements Node {
  accountName: String!
  balance: Float!
  chainId: ID!
  fungibleName: String!
  guard: Guard!
  id: ID!
  transactions(after: String, before: String, first: Int, last: Int): FungibleChainAccountTransactionsConnection!
  transfers(after: String, before: String, first: Int, last: Int): FungibleChainAccountTransfersConnection!
}

type FungibleChainAccountTransactionsConnection {
  edges: [FungibleChainAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleChainAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type FungibleChainAccountTransfersConnection {
  edges: [FungibleChainAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleChainAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

type GasLimitEstimation {
  amount: Int!
  inputType: String!
  transaction: String!
  usedPreflight: Boolean!
  usedSignatureVerification: Boolean!
}

"""General information about the graph and chainweb-data."""
type GraphConfiguration {
  """The lowest block-height that is indexed in this endpoint."""
  minimumBlockHeight: BigInt
}

"""Guard for an account."""
type Guard {
  keys: [String!]!
  predicate: String!
}

"""The account of the miner that solved a block."""
type MinerKey implements Node {
  block: Block!
  blockHash: String!
  id: ID!
  key: String!
}

interface Node {
  id: ID!
}

"""A non-fungible-specific account."""
type NonFungibleAccount implements Node {
  accountName: String!
  chainAccounts: [NonFungibleChainAccount!]!
  id: ID!
  nonFungibles: [Token!]!
  transactions(after: String, before: String, first: Int, last: Int): NonFungibleAccountTransactionsConnection!
}

type NonFungibleAccountTransactionsConnection {
  edges: [NonFungibleAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NonFungibleAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

"""A chain and non-fungible-specific account."""
type NonFungibleChainAccount implements Node {
  accountName: String!
  chainId: ID!
  id: ID!
  nonFungibles: [Token!]!
  transactions(after: String, before: String, first: Int, last: Int): NonFungibleChainAccountTransactionsConnection!
}

type NonFungibleChainAccountTransactionsConnection {
  edges: [NonFungibleChainAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NonFungibleChainAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

input PactQuery {
  chainId: String!
  code: String!
  data: [PactQueryData!]
}

input PactQueryData {
  key: String!
  value: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Floats that will have a value greater than 0."""
scalar PositiveFloat

type Query {
  """Retrieve a block by hash."""
  block(hash: String!): Block

  """Retrieve blocks by chain and minimal depth."""
  blocksFromDepth(chainIds: [String!]!, minimumDepth: Int!): [Block!]

  """Retrieve blocks by chain and minimal height."""
  blocksFromHeight(chainIds: [String!], startHeight: Int!): [Block!]!

  """Retrieve all completed blocks from a given height."""
  completedBlockHeights(chainIds: [String!] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"], completedHeights: Boolean = false, heightCount: Int = 3): [Block!]!

  """Retrieve a single event by its unique key."""
  event(blockHash: String!, orderIndex: Int!, requestKey: String!): Event

  """Retrieve events."""
  events(after: String, before: String, chainId: String, first: Int, last: Int, parametersFilter: String, qualifiedEventName: String!): QueryEventsConnection!

  """
  Retrieve an fungible specific account by its name and fungible, such as coin.
  """
  fungibleAccount(accountName: String!, fungibleName: String!): FungibleAccount

  """Retrieve an account by public key."""
  fungibleAccountByPublicKey(publicKey: String!): FungibleAccount

  """
  Retrieve an account by its name and fungible, such as coin, on a specific chain.
  """
  fungibleChainAccount(accountName: String!, chainId: String!, fungibleName: String!): FungibleChainAccount

  """Retrieve a chain account by public key."""
  fungibleChainAccountByPublicKey(chainId: String!, publicKey: String!): FungibleChainAccount

  """Estimate the gas limit for a transaction."""
  gasLimitEstimate(input: String!): GasLimitEstimation!

  """Estimate the gas limit for a list of transactions."""
  gasLimitEstimates(input: [String!]!): [GasLimitEstimation!]!

  """Get the configuration of the graph."""
  graphConfiguration: GraphConfiguration!

  """Get the height of the block with the highest height."""
  lastBlockHeight: BigInt
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!

  """Retrieve a non-fungible specific account by its name."""
  nonFungibleAccount(accountName: String!): NonFungibleAccount

  """Retrieve an account by its name on a specific chain."""
  nonFungibleChainAccount(accountName: String!, chainId: String!): NonFungibleChainAccount

  """
  Execute arbitrary Pact code via a local call without gas-estimation or signature-verification (e.g. (+ 1 2) or (coin.get-details <account>)).
  """
  pactQueries(pactQuery: [PactQuery!]!): [String!]!

  """
  Execute arbitrary Pact code via a local call without gas-estimation or signature-verification (e.g. (+ 1 2) or (coin.get-details <account>)).
  """
  pactQuery(pactQuery: PactQuery!): String!

  """Retrieve one transaction by its unique key."""
  transaction(blockHash: String!, requestKey: String!): Transaction

  """Retrieve transactions."""
  transactions(accountName: String, after: String, before: String, blockHash: String, chainId: String, first: Int, fungibleName: String, last: Int, requestKey: String): QueryTransactionsConnection!

  """Retrieve all transactions by a given public key."""
  transactionsByPublicKey(after: String, before: String, first: Int, last: Int, publicKey: String!): QueryTransactionsByPublicKeyConnection!

  """Retrieve one transfer by its unique key."""
  transfer(blockHash: String!, chainId: String!, moduleHash: String!, orderIndex: Int!, requestKey: String!): Transfer

  """Retrieve transfers."""
  transfers(accountName: String, after: String, before: String, chainId: String, first: Int, fungibleName: String, last: Int): QueryTransfersConnection!
}

type QueryEventsConnection {
  edges: [QueryEventsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryEventsConnectionEdge {
  cursor: String!
  node: Event!
}

type QueryTransactionsByPublicKeyConnection {
  edges: [QueryTransactionsByPublicKeyConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransactionsByPublicKeyConnectionEdge {
  cursor: String!
  node: Transaction!
}

type QueryTransactionsConnection {
  edges: [QueryTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type QueryTransfersConnection {
  edges: [QueryTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""A signer for a specific transaction."""
type Signer implements Node {
  """The signer for the gas."""
  address: String
  capabilities: String
  id: ID!
  orderIndex: Int!
  publicKey: String!
  requestKey: String!

  """The signature scheme that was used to sign."""
  scheme: String

  """The result of the signing operation of the hash of the transaction."""
  signature: String!
}

type Subscription {
  """Listen for events by qualifiedName (e.g. `coin.TRANSFER`)."""
  events(chainId: String, parametersFilter: String, qualifiedEventName: String!): [Event!]

  """Subscribe to new blocks."""
  newBlocks(chainIds: [Int!]): [Block!]

  """Subscribe to new blocks from a specific depth."""
  newBlocksFromDepth(chainIds: [String!]!, minimumDepth: Int!): [Block!]

  """
  Listen for a transaction by request key. Returns the ID when it is in a block.
  """
  transaction(requestKey: String!): Transaction
}

"""The token identifier and its balance."""
type Token {
  balance: Int!
  chainId: String!
  id: ID!
  info: TokenInfo
  version: String!
}

"""Information related to a token."""
type TokenInfo {
  precision: Int!
  supply: Int!
  uri: String!
}

"""A confirmed transaction."""
type Transaction implements Node {
  block: Block
  cmd: TransactionCommand!
  events: [Event!]
  hash: String!
  id: ID!
  result: TransactionResult!
  transfers: [Transfer!]
}

"""A transaction cmd."""
type TransactionCommand {
  meta: TransactionMeta!

  """The network id of the environment."""
  networkId: String!
  nonce: String!
  payload: TransactionPayload!
  signers: [Signer!]
}

"""The metadata of a transaction."""
type TransactionMeta {
  chainId: BigInt!
  creationTime: DateTime!
  gasLimit: BigInt!
  gasPrice: Float!
  sender: String!
  ttl: BigInt!
}

"""The payload of a transaction."""
union TransactionPayload = ContinuationPayload | ExecutionPayload

"""The result of a transaction."""
type TransactionResult {
  """The transaction result when it was successful. Formatted as raw JSON."""
  badResult: String

  """
  The JSON stringified continuation in the case that it is a continuation.
  """
  continuation: String
  eventCount: BigInt
  gas: BigInt!

  """The transaction result when it was successful. Formatted as raw JSON."""
  goodResult: String

  """The height of the block this transaction belongs to."""
  height: BigInt!

  """Identifier to retrieve the logs for the execution of the transaction."""
  logs: String
  metadata: String
  transactionId: BigInt
}

"""A transfer of funds from a fungible between two accounts."""
type Transfer implements Node {
  amount: Decimal!
  block: Block!
  blockHash: String!
  chainId: BigInt!
  creationTime: DateTime!

  """
  The counterpart of the crosschain-transfer. `null` when it is not a cross-chain-transfer.
  """
  crossChainTransfer: Transfer
  height: BigInt!
  id: ID!
  moduleHash: String!
  moduleName: String!

  """
  The order of the transfer when it is a `defpact` (multi-step transaction) execution.
  """
  orderIndex: BigInt!
  receiverAccount: String!
  requestKey: String!
  senderAccount: String!

  """The transaction that initiated this transfer."""
  transaction: Transaction
}