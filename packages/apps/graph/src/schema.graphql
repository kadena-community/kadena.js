# wallet
# - balances
# - history transactions

# explorer (insight + incentive(!))
# - requestkey polling
# - crosschain transactions + continuations

# fungibles
# - holders (exclude dust)
# - transfers filtered by pubkey
# - transfers filtered by token

# dapp
# - events
# - remove code (now misused)

# non-fungibles NFTs
# domain shortname kda wallet service (https://www.aptosnames.com/)
# - what tokens belong to an account (balance > 0)
# -

# - lijstje met basics voor ecosystem te thriven

scalar PositiveFloat
scalar Date
scalar BigInt

# account: a holder of fungibles
type Query {
  lastBlockHeight: Int!
  """
  accountName is mandatory, default use module "coin"
  An Account is specific to fungible modules
  """
  account(accountName: String!, filter: AccountFilter): Account!
  blocks(filter: BlocksFilterInput): [Block!]!
  fungibles(filter: FungiblesFilterInput): [Fungible!]!
  fungible(module: String! = "coin"): Fungible
  # TODO being able to filter events by argument and position of the argument
  events(filter: EventsFilterInput): [TransactionEvent!]!

  node(id: ID!): Node!
  nodes(ids: [ID!]!): [Node!]!
}

input EventsFilterInput {
  name: String!
  arguments: [String!]!
  signer: String!
}

type Fungible {
  chains: [String!]!
  module(chainIds: [Int!]!): [Module!]! # resolver: POST /local BODY (describe-module <name>)
  holders: BigInt!
  precision: Int!
  volume24h: BigInt!
  verified: FungibleVerified
  transfers(last: Int!): [Transfer!]!
}

type Module {
  name: String!
  code: String!
}

type FungibleVerified {
  symbol: String!
  socials: [String!]!
}

input FungiblesFilterInput {
  modules: [String!]
  symbols: [String!]
}

type Block {
  chainid: BigInt!
  creationtime: Date!
  epoch: Date!
  # flags: Float!
  powhash: String!
  hash: ID!
  height: BigInt!
  nonce: Float!
  """
  The parent and parents from neighbour chains
  """
  parents: [Block!]!
  payload: String!
  target: PositiveFloat!
  weight: PositiveFloat!
  miner: Account!
  transactions(first: Int, last: Int): [Transaction!]!
}

extend type Query {
  hello: String
}

"""
When completedHeights is true, it returns the last n most recent completed heights
  + most recent blocks in the recent height
When completedHeights is false, it returns the last n recent blocks
"""
input BlocksFilterInput {
  completedHeights: Boolean! = true
  count: Int! = 2
}

# query {
#   getAccount(accountName: "alber70g") {
#     fungibles {
#       name
#     }
#   }
# }

input AccountFilter {
  module: String = "coin"
}

interface Node {
  id: ID!
}

type Account {
  """
  The id of the account, being __typename:accountName
  e.g.: Account:k:oairestnoiarsetn
  """
  id: ID!
  accountName: String!
  chainAccounts: [ChainAccount!]!
  totalBalance: Float!
  transactions: [Transaction!]!
}

# query TheTransactions {
#   getAccount(accountName: "alber70g", filter: {module: "coin"}) {
#     totalBalance
#     chainAccounts {
#       balance
#     }
#   }
#   getAccount(accountName: "alber70g", filter: {module: "free.blaattoken"}) {
#     totalBalance
#     chainAccounts {
#       balance
#     }
#   }
# }

type ChainAccount {
  chainId: ID!
  guard: Guard!
  """
  The resolver will call /local with `<module>.get-balance`
  """
  balance: Float!
  module: String!
  """
  All transactions where the signer is this accounts guard
  """
  transactions: [Transaction!]!
  """
  Sub selection of transfers
  All transfers where the sender or receiver is this account
  Based on fungible.TRANSFER
  """
  transfers(module: String! = "coin"): [Transfer!]!
}

type Transaction {
  gas: Float!
  result: TransactionResult!
  """
  aka hash
  """
  reqKey: String!
  logs: String!
  events: [TransactionEvent!]!
  metadata: String!
  txId: String!
  code: String!

  """
  type: cont
  """
  continuation: Continuation!
  signatures: [String!]!
  block: Block!
  """
  Will be null if the transaction has no transfers
  """
  transfers: [Transfer]
}

type Continuation {
  executed: String
  pactId: String!
  stepHasRollback: Boolean!
  step: Int!
  stepCount: Int!
  yield: ContinuationYield
  continuation: ContinuationContinuation
}

type ContinuationContinuation {
  args: [String!]!
  def: String!
}
type ContinuationYield {
  data: String!
  source: String!
  provenance: Provenance!
}
type Provenance {
  targetChainId: String!
  moduleHash: String!
}

type TransactionEvent {
  name: String!
  params: [String!]!
}

union TransactionResult = TransactionResultSuccess | TransactionResultFailure

type TransactionResultSuccess {
  data: String!
}

type TransactionResultFailure {
  error: TransactionResultFailureError
}

type TransactionResultFailureError {
  type: String!
  message: String!
  info: String!
  callStack: [String!]!
}

"""
Transfer is a fungible transfer, with one or more transactions.
When there are more than one transaction, it means that the transfer was a crosschain transfer.
The transactions that emits "TRANSFER" "TRANSFER_XCHAIN_RECD"
"""
type Transfer {
  from: Account!
  to: Account!
  amount: Float!
  """
  For a non-crosschain transaction, this will be one transaction
  For a crosschain transaction, this will be a pair of
  TRANSFER_XCHAIN TRANSFER_XCHAIN_RECD
  eg:
  - step 1 https://explorer.chainweb.com/testnet/chain/1/block/2Fy-b2E5b7vo1yr_iejxbTHRIkIlknLGoSI8Y1UvO5I/txs
  - step 2 https://explorer.chainweb.com/testnet/chain/0/block/1CZEdBfweogPRjURPD17_D7Jx-MDE9CrS7nGyFP0NDE/txs
  """
  transaction: [Transaction]!
}

type Guard {
  keys: [String!]!
  predicate: KeysetPredicate!
}

enum KeysetPredicate {
  KeysAll
  KeysAny
  KeysTwo
}

# base64(type, repo, branch/commit, path)("file", "alber70g/eenrepo", "master", "package.json") = 02938l9287459128934
# url: iets.com/repo/branch/path
# query file {
#   node(id: "02938l9287459128934") {
#     ... on File {
#       name
#       contents
#     }
#   }
# }

type Subscription {
  newBlocks(filter: NewBlocksFilterInput): [Block!]!
  events(filter: EventsFilterInput): [TransactionEvent!]!
  transaction(requestKey: String!): Transaction
  # todo
  # send(sendBody: SendBody): SendResponse
}

input NewBlocksFilterInput {
  chains: [Int!]! = [
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
  ]
  onlyWithTransactions: Boolean = false
}
# query EventsForMe {
#   events(eventName: ["kdlaunch.kdswap-exchange.UPDATE"]) {}
# }

# type Mutation {
# send(sendBody: SendBody): SendResponse
# local(localBody: LocalBody): LocalResponse

# crosschain transfers, insight in hops + estimate time to confirmation
# transfer(from: String, to: String): Transfer!
# }

################

# Block is a block from the Chainweb blockchain
# type Block {
#   id: Int!
#   chainid: BigInt!
#   creationtime: Date!
#   epoch: Date!
#   flags: Float!
#   hash: ID!
#   height: BigInt!
#   miner: String!
#   nonce: Float!
#   parent: String!
#   payload: String!
#   powhash: String!
#   predicate: String!
#   target: PositiveFloat!
#   weight: PositiveFloat!
# }
